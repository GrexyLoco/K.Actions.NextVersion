name: 🚀 Release K.Actions.NextVersion

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      force-release:
        description: 'Force release even if no changes'
        required: false
        default: false
        type: boolean

# 🔐 Permissions required for test-reporter and release creation
permissions:
  contents: write
  actions: read
  checks: write

jobs:
  # 🧪 First run ALL tests - Release ONLY if tests pass!
  run-tests:
    name: 🧪 Run Test Suite
    uses: ./.github/workflows/test.yml
    permissions:
      contents: read
      actions: read
      checks: write
    
  # 📦 Release job depends on successful tests
  version-and-release:
    name: 📦 Version & Release
    runs-on: ubuntu-latest
    needs: run-tests  # 🚨 CRITICAL: Release only after successful tests!
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (needs.run-tests.outputs.test-success == 'true' || github.event.inputs.force-release == 'true')
    outputs:
      next-version: ${{ steps.version.outputs.newVersion }}
      target-branch: ${{ steps.version.outputs.targetBranch }}
      suffix: ${{ steps.version.outputs.suffix }}
      action-required: ${{ steps.version.outputs.actionRequired }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Determine Next Version
        id: version
        uses: ./
        with:
          manifestPath: './TestModule.psd1'
          branchName: ${{ github.ref_name }}

      - name: 📋 Generate Release Summary
        shell: pwsh
        run: |
          $versionResults = @{
            NextVersion = '${{ steps.version.outputs.newVersion }}'
            TargetBranch = '${{ steps.version.outputs.targetBranch }}'
            Suffix = '${{ steps.version.outputs.suffix }}'
            ActionRequired = '${{ steps.version.outputs.actionRequired }}'
          }
          $testResults = @{
            TotalTests = '${{ needs.run-tests.outputs.total-tests }}'
            PassedTests = '${{ needs.run-tests.outputs.passed-tests }}'
            FailedTests = '${{ needs.run-tests.outputs.failed-tests }}'
            SkippedTests = '0'  # Release workflow doesn't run skipped tests
          }
          & "./.github/Scripts/New-GitHubSummary.ps1" -SummaryType 'release' -VersionResults $versionResults -TestResults $testResults

      - name: 🏷️ Create Git Tag
        if: steps.version.outputs.actionRequired == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.version.outputs.newVersion }}" -m "Release v${{ steps.version.outputs.newVersion }}"
          git push origin "v${{ steps.version.outputs.newVersion }}"

      - name: 📦 Create GitHub Release
        if: steps.version.outputs.actionRequired == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.newVersion }}
          release_name: Release v${{ steps.version.outputs.newVersion }}
          body: |
            ## 🚀 Release v${{ steps.version.outputs.newVersion }}
            
            ### ✅ Quality Assurance
            - 🧪 Tests Passed: ${{ needs.run-tests.outputs.passed-tests }}/${{ needs.run-tests.outputs.total-tests }}
            - 🔄 Change Type: ${{ steps.version.outputs.suffix }}
            - 🎯 Target Branch: ${{ steps.version.outputs.targetBranch }}
            
            ### 📋 Release Information
            This release was automatically generated based on semantic versioning rules.
            All quality gates have been passed successfully.
            
            **Branch**: `${{ github.ref_name }}`  
            **Commit**: `${{ github.sha }}`  
            **Triggered by**: @${{ github.actor }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.suffix, 'pre') || contains(steps.version.outputs.suffix, 'alpha') || contains(steps.version.outputs.suffix, 'beta') }}

  # 📊 Post-Release Notification
  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [run-tests, version-and-release]
    if: success()
    
    steps:
      - name: 🎉 Success Notification
        run: |
          echo "## 🎉 Release Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version**: v${{ needs.version-and-release.outputs.next-version }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests**: ${{ needs.run-tests.outputs.passed-tests }}/${{ needs.run-tests.outputs.total-tests }} passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Quality Gates**: All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Release is live and ready for use!**" >> $GITHUB_STEP_SUMMARY
